import { DashboardView } from "dashboard.slint";
import { ContainersList } from "containers.slint";
import { ContainerDetails } from "container-details.slint";
import { ImagesList } from "images.slint";
import { NetworksList } from "network.slint";
import { VolumesList } from "volumes.slint";
import { CreateContainerModal } from "create-container.slint";
import { NotificationTooltip } from "notification.slint";
import { ServersList } from "servers.slint";
import { SshConfigModal } from "ssh_config.slint";

// Interface principal da aplicação Docker UI

// Ponto de dados para gráficos
struct ChartPoint {
    time: string,
    value: float,
}

// Dados básicos de um container
struct ContainerData {
    name: string,
    image: string,
    status: string,
    ports: string,
    created: string,
}

struct ImageData {
    id: string,
    tag: string,
    size: string,
    created: string,
    in_use: bool,
}

struct NetworkData {
    id: string,
    name: string,
    driver: string,
    scope: string,
    created: string,
    containers_count: int,
    is_system: bool,
}

struct VolumeData {
    name: string,
    driver: string,
    mountpoint: string,
    created: string,
    containers_count: int,
}

struct ServerData {
    id: string,
    name: string,
    server_type: string,
    host: string,
    port: int,
    username: string,
    description: string,
    is_active: bool,
    is_connected: bool,
    last_connected: string,
    docker_version: string,
    containers_count: int,
    images_count: int,
    networks_count: int,
    volumes_count: int,
}

struct ServerConfigData {
    id: string,
    name: string,
    host: string,
    port: int,
    username: string,
    password: string,
    description: string,
    docker_socket: string,
    connection_timeout: int,
    command_timeout: int,
}

// Botão do cabeçalho com estado ativo
component HeaderButton inherits Rectangle {
    in property <string> text;
    in property <bool> active: false;
    callback clicked <=> touch.clicked;

    height: 32px;
    background: root.active ? #232424 : #2e3030;
    border-radius: 6px;

    touch := TouchArea { }

    HorizontalLayout {
        alignment: start;
        padding: 8px;

        Text {
            text: root.text;
            color: #ffffff;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}


// Janela principal da aplicação
export component AppWindow inherits Window {
    // Propriedades gerais
    in-out property <string> docker-status: "Desconhecido";
    in-out property <int> current-screen: 0;

    // Propriedades de informações do Docker
    in-out property <int> total-containers;
    in-out property <int> running-containers;
    in-out property <int> stopped-containers;
    in-out property <int> paused-containers;
    in-out property <int> total-images;
    in-out property <string> docker-version;

    // Propriedades de estatísticas do sistema
    in-out property <string> cpu-usage-str;
    in-out property <string> memory-percentage-str;
    in-out property <string> network-rx-str;
    in-out property <string> network-tx-str;
    in-out property <image> cpu-chart;
    in-out property <image> memory-chart;

    // Propriedades dos containers
    in-out property <[ContainerData]> containers;
    in-out property <string> search-text;
    in-out property <string> status-filter: "all";
    in-out property <string> container-loading: "";
    in-out property <string> container-error: "";
    in-out property <string> container-success: "";
    in-out property <ContainerData> selected-container;
    in-out property <string> container-logs: "";
    in-out property <bool> logs-loading: false;
    in-out property <int> logs-lines-loaded: 50;
    in-out property <string> container-cpu-usage: "0.0%";
    in-out property <string> container-cpu-total: "0%";
    in-out property <string> container-memory-usage: "0 MB";
    in-out property <string> container-network-rx: "0 KB/s";
    in-out property <string> container-network-tx: "0 KB/s";
    in-out property <image> container-cpu-chart;
    in-out property <image> container-memory-chart;
    in-out property <bool> metrics-expanded: false;
    in-out property <bool> logs-expanded: false;

    // Propriedades das imagens
    in-out property <[ImageData]> images;
    in-out property <string> image-list-error;
    in-out property <string> success-message;
    in-out property <string> error-in-use-message;
    in-out property <string> error-other-message;
    callback refresh-images-clicked();
    callback image-action(string, string);

    // Propriedades das networks
    in-out property <[NetworkData]> networks;
    in-out property <string> network-list-error;
    in-out property <string> network-success-message;
    in-out property <string> network-error-in-use-message;
    in-out property <string> network-error-other-message;
    callback refresh-networks-clicked();
    callback network-action(string, string);

    // Propriedades dos volumes
    in-out property <[VolumeData]> volumes;
    in-out property <string> volume-list-error;
    in-out property <string> volume-success-message;
    in-out property <string> volume-error-in-use-message;
    in-out property <string> volume-error-other-message;
    callback refresh-volumes-clicked();
    callback volume-action(string, string);

    // Propriedades dos servidores
    in-out property <[ServerData]> servers;
    in-out property <string> server-list-error: "";
    in-out property <string> server_success_message: "";
    in-out property <string> server_error_message: "";
    in-out property <string> server-loading-action: "";
    in-out property <ServerData> selected-server;
    in-out property <string> active-server-id: "";
    in-out property <string> active-server-name: "Local";
    in-out property <string> connection-status: "disconnected"; // "connected", "connecting", "disconnected", "error"
    in-out property <string> connection-status-message: "";
    callback refresh-servers-clicked();
    callback server-action(string, string);
    callback view-server-details(ServerData);
    callback edit-server(ServerData);
    callback add-server-clicked();
    callback export-config-clicked();
    callback import-config-clicked();
    callback switch-active-server(string);

    // Propriedades do modal de configuração SSH
    in-out property <bool> show-ssh-config-modal: false;
    in-out property <bool> ssh-config-edit-mode: false;
    in-out property <string> ssh-config-modal-title: "Adicionar Servidor SSH";
    in-out property <ServerConfigData> ssh-config-data;
    in-out property <bool> ssh-config-saving: false;
    in-out property <string> ssh-config-validation-error: "";
    callback save-server-config(ServerConfigData);
    callback cancel-server-config();
    callback test-server-connection(ServerConfigData);
    callback ssh-config-file-browse(string);

    // Propriedades do modal de criação de container
    in-out property <bool> show-create-modal: false;
    in-out property <string> create-container-name: "";
    in-out property <string> create-image-name: "";
    in-out property <string> create-command: "";
    in-out property <string> create-restart-policy: "no";
    in-out property <string> create-ports-text: "";
    in-out property <string> create-volumes-text: "";
    in-out property <string> create-env-vars-text: "";
    in-out property <bool> creating-container: false;

    // Propriedades da notificação
    in-out property <string> notification-message: "";
    in-out property <bool> notification-is-error: false;
    in-out property <bool> show-notification: false;

    // Callbacks para interação
    callback screen-changed(int);
    callback search-changed(string);
    callback filter-changed(string);
    callback container-action(string, string);
    callback view-container-details(ContainerData);
    callback load-more-logs();
    callback create-container(string, string, string, string, string, string, string);
    callback cancel-create-container();

    title: "Docker UI";
    min-width: 1020px;
    max-width: 1300px;
    preferred-width: 1020px;
    min-height: 850px;
    max-height: 1500px;
    preferred-height: 950px;
    always-on-top: false;
    no-frame: false;
    background: #1A1B1B;

    // Layout principal sem modal
    HorizontalLayout {

        // Cabeçalho da aplicação
        Rectangle {
            background: #262929;
            VerticalLayout {

                VerticalLayout {
                    padding-top: 18px;
                    padding: 8px;
                    height: 100%;
                    alignment: space-between;

                    VerticalLayout {
                        spacing: 10px;

                        // Botão principal do dashboard
                        HeaderButton {
                            Text {
                                text: "Docker UI";
                                color: #ffffff;
                                font-size: 14px;
                                font-weight: 600;
                            }

                            clicked => {
                                root.screen-changed(0);
                            }
                        }

                        Rectangle {
                            height: 10px;
                        }

                        HeaderButton {
                            text: "Containers";
                            active: root.current-screen == 1;
                            clicked => {
                                root.screen-changed(1);
                            }
                        }

                        HeaderButton {
                            text: "Images";
                            active: root.current-screen == 2;
                            clicked => {
                                root.screen-changed(2);
                            }
                        }

                        HeaderButton {
                            text: "Networks";
                            active: root.current-screen == 3;
                            clicked => {
                                root.screen-changed(3);
                            }
                        }

                        HeaderButton {
                            text: "Volumes";
                            active: root.current-screen == 4;
                            clicked => {
                                root.screen-changed(4);
                            }
                        }

                        HeaderButton {
                            text: "Servidores";
                            active: root.current-screen == 6;
                            clicked => {
                                root.screen-changed(6);
                            }
                        }
                    }

                    // Seletor de servidor ativo
                    Rectangle {
                        height: 80px;
                        background: transparent;

                        VerticalLayout {
                            spacing: 8px;
                            padding: 8px;

                            Text {
                                text: "Servidor Ativo";
                                color: #9ca3af;
                                font-size: 11px;
                                horizontal-alignment: center;
                            }

                            Rectangle {
                                height: 45px;
                                background: #1f2937;
                                border-radius: 6px;
                                border-width: 1px;
                                border-color: #374151;

                                VerticalLayout {
                                    padding: 6px;
                                    spacing: 2px;

                                    HorizontalLayout {
                                        spacing: 6px;
                                        alignment: center;

                                        // Indicador de status de conexão
                                        Rectangle {
                                            width: 8px;
                                            height: 8px;
                                            border-radius: 4px;
                                            background: root.connection-status == "connected" ? #10b981 :
                                                       root.connection-status == "connecting" ? #f59e0b :
                                                       root.connection-status == "error" ? #ef4444 : #6b7280;
                                        }

                                        Text {
                                            text: root.active-server-name != "" ? root.active-server-name : "Local";
                                            color: #ffffff;
                                            font-size: 12px;
                                            font-weight: 600;
                                            horizontal-alignment: center;
                                            overflow: elide;
                                        }

                                        Text {
                                            text: root.active-server-id != "" ? "🌐" : "💻";
                                            font-size: 10px;
                                        }
                                    }

                                    Text {
                                        text: root.connection-status == "connected" ? "Conectado" :
                                              root.connection-status == "connecting" ? "Conectando..." :
                                              root.connection-status == "error" ? "Erro de conexão" :
                                              root.active-server-id != "" ? "Desconectado" : "Local";
                                        color: root.connection-status == "connected" ? #10b981 :
                                               root.connection-status == "connecting" ? #f59e0b :
                                               root.connection-status == "error" ? #ef4444 : #6b7280;
                                        font-size: 10px;
                                        horizontal-alignment: center;
                                    }
                                }

                                TouchArea {
                                    clicked => {
                                        // Abre lista de servidores para seleção
                                        root.screen-changed(6);
                                    }
                                }
                            }
                        }
                    }

                // Rodapé com status do Docker
                Rectangle {
                        background: transparent;
                        vertical-stretch: 0;

                        // Indicador de status do Docker
                        Text {
                            max-width: 60px;
                            overflow: elide;
                            text: root.docker-status;
                            color: root.docker-status == "Rodando" ? #0AD95C : #FA6138;
                            font-size: 14px;
                        }
                    }
                }
            }
        }
        // Linha separadora do cabeçalho
        Rectangle {
            width: 1px;
            height: 100%;
            background: #464747;
                // y: parent.height - 1px;
            }
        // Conteúdo principal
        Rectangle {
            // height: parent.height - 32px - 48px - 25px;

            background: #1A1B1B;
            vertical-stretch: 1;

            // Dashboard principal
            if root.current-screen == 0: DashboardView {
                total-containers: root.total-containers;
                running-containers: root.running-containers;
                stopped-containers: root.stopped-containers;
                paused-containers: root.paused-containers;
                total-images: root.total-images;
                docker-version: root.docker-version;
                cpu-usage-str: root.cpu-usage-str;
                memory-percentage-str: root.memory-percentage-str;
                network-rx-str: root.network-rx-str;
                network-tx-str: root.network-tx-str;
                cpu-chart: root.cpu-chart;
                memory-chart: root.memory-chart;
            }

            // Outras telas da aplicação
            if root.current-screen == 1: ContainersList {
                containers: root.containers;
                search-text: root.search-text;
                status-filter: root.status-filter;
                container-loading: root.container-loading;
                container-error: root.container-error;
                container-success: root.container-success;

                search-changed(text) => {
                    root.search-text = text;
                    root.search-changed(text);
                }
                filter-changed(filter) => {
                    root.status-filter = filter;
                    root.filter-changed(filter);
                }
                container-action(name, action) => {
                    root.container-action(name, action);
                }
                view-container-details(container) => {
                    root.selected-container = container;
                    root.current-screen = 5;
                    root.logs-lines-loaded = 50; // Reset para 50 linhas quando muda de container
                }
                create-container-clicked => {
                    root.show-create-modal = true;
                }
            }
            if root.current-screen == 2: ImagesList {
                images: root.images;
                image-list-error: root.image-list-error;
                success_message: root.success-message;
                error_in_use_message: root.error-in-use-message;
                error_other_message: root.error-other-message;
                refresh-clicked => {
                    root.refresh-images-clicked();
                }
                image-action(id, action) => {
                    root.image-action(id, action);
                }
            }
            if root.current-screen == 3: NetworksList {
                networks: root.networks;
                network-list-error: root.network-list-error;
                network_success_message: root.network-success-message;
                network_error_in_use_message: root.network-error-in-use-message;
                network_error_other_message: root.network-error-other-message;
                refresh-clicked => {
                    root.refresh-networks-clicked();
                }
                network-action(id, action) => {
                    root.network-action(id, action);
                }
            }
            if root.current-screen == 4: VolumesList {
                volumes: root.volumes;
                volume-list-error: root.volume-list-error;
                volume_success_message: root.volume-success-message;
                volume_error_in_use_message: root.volume-error-in-use-message;
                volume_error_other_message: root.volume-error-other-message;
                refresh-clicked => {
                    root.refresh-volumes-clicked();
                }
                volume-action(name, action) => {
                    root.volume-action(name, action);
                }
            }
            if root.current-screen == 5: ContainerDetails {
                container: root.selected-container;
                loading-action: root.container-loading;
                container-error: root.container-error;
                container-success: root.container-success;
                container-logs: root.container-logs;
                logs-loading: root.logs-loading;
                container-cpu-usage: root.container-cpu-usage;
                container-cpu-total: root.container-cpu-total;
                container-memory-usage: root.container-memory-usage;
                container-network-rx: root.container-network-rx;
                container-network-tx: root.container-network-tx;
                container-cpu-chart: root.container-cpu-chart;
                container-memory-chart: root.container-memory-chart;
                metrics-expanded: root.metrics-expanded;
                logs-expanded: root.logs-expanded;
                back-clicked => {
                    root.current-screen = 1;
                    root.logs-lines-loaded = 50; // Reset quando volta para lista
                    root.metrics-expanded = false; // Reset metrics
                    root.logs-expanded = false; // Reset logs
                }
                container-action(action) => {
                    root.container-action(root.selected-container.name, action);
                }
                load-more-logs => {
                    root.load-more-logs();
                }
                toggle-metrics => {
                    root.metrics-expanded = !root.metrics-expanded;
                }
                toggle-logs => {
                    root.logs-expanded = !root.logs-expanded;
                }
            }
            if root.current-screen == 6: ServersList {
                servers: root.servers;
                server-list-error: root.server-list-error;
                server_success_message: root.server_success_message;
                server_error_message: root.server_error_message;
                loading-action: root.server-loading-action;
                selected-server: root.selected-server;

                refresh-clicked => {
                    root.refresh-servers-clicked();
                }
                server-action(id, action) => {
                    root.server-action(id, action);
                }
                view-server-details(server_data) => {
                    root.view-server-details(server_data);
                }
                edit-server(server_data) => {
                    root.edit-server(server_data);
                }
                add-server-clicked => {
                    root.add-server-clicked();
                }
                export-config-clicked => {
                    root.export-config-clicked();
                }
                import-config-clicked => {
                    root.import-config-clicked();
                }
            }
        }
    }

    // Modal de criação de container - posicionamento absoluto, fora do layout
    if show-create-modal: CreateContainerModal {
        show-modal: true;
        container-name <=> create-container-name;
        image-name <=> create-image-name;
        command <=> create-command;
        restart-policy <=> create-restart-policy;
        ports-text <=> create-ports-text;
        volumes-text <=> create-volumes-text;
        env-vars-text <=> create-env-vars-text;
        creating <=> creating-container;

        create-clicked => {
            root.create-container(
                create-container-name,
                create-image-name,
                create-command,
                create-restart-policy,
                create-ports-text,
                create-volumes-text,
                create-env-vars-text);
        }

        cancel-clicked => {
            root.cancel-create-container();
        }
    }

    // Modal de configuração SSH
    if show-ssh-config-modal: SshConfigModal {
        show-modal: true;
        edit-mode: root.ssh-config-edit-mode;
        modal-title: root.ssh-config-modal-title;
        server-config: root.ssh-config-data;
        is-saving: root.ssh-config-saving;
        validation-error: root.ssh-config-validation-error;

        save-clicked(config) => {
            root.save-server-config(config);
        }

        cancel-clicked => {
            root.cancel-server-config();
        }

        test-connection-clicked(config) => {
            root.test-server-connection(config);
        }

        file-browse-clicked(field) => {
            root.ssh-config-file-browse(field);
        }
    }

    // Sistema de notificações - sempre por último para ter z-index mais alto
    if show-notification: NotificationTooltip {
        message: notification-message;
        is-error: notification-is-error;
        show-notification: true;

        auto-hide => {
            root.show-notification = false;
        }
    }
}
