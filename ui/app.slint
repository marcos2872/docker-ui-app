import { DashboardView } from "dashboard.slint";
import { ContainersList } from "containers.slint";
import { ImagesList } from "images.slint";
import { NetworksList } from "network.slint";
import { VolumesList } from "volumes.slint";

// Interface principal da aplicação Docker UI

// Ponto de dados para gráficos
struct ChartPoint {
    time: string,
    value: float,
}

// Dados básicos de um container
struct ContainerData {
    name: string,
    image: string,
    status: string,
    ports: string,
    created: string,
}

// Botão do cabeçalho com estado ativo
component HeaderButton inherits Rectangle {
    in property <string> text;
    in property <bool> active: false;
    callback clicked <=> touch.clicked;

    height: 32px;
    background: root.active ? #2e3030 : transparent;
    border-radius: 6px;

    touch := TouchArea { }

    HorizontalLayout {
        padding: 8px;

        Text {
            text: root.text;
            color: #ffffff;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}


// Janela principal da aplicação
export component AppWindow inherits Window {
    // Propriedades gerais
    in-out property <string> docker-status: "Desconhecido";
    in-out property <int> current-screen: 0;

    // Propriedades de informações do Docker
    in-out property <int> total-containers;
    in-out property <int> running-containers;
    in-out property <int> stopped-containers;
    in-out property <int> paused-containers;
    in-out property <int> total-images;
    in-out property <string> docker-version;

    // Propriedades de estatísticas do sistema
    in-out property <string> cpu-usage-str;
    in-out property <string> memory-percentage-str;
    in-out property <string> network-rx-str;
    in-out property <string> network-tx-str;
    in-out property <image> cpu-chart;
    in-out property <image> memory-chart;

    // Propriedades dos containers
    in-out property <[ContainerData]> containers;
    in-out property <string> search-text;
    in-out property <string> status-filter: "all";

    // Callbacks para interação
    callback screen-changed(int);
    callback search-changed(string);
    callback filter-changed(string);
    callback container-action(string, string);

    title: "Docker UI";
    min-width: 950px;
    max-width: 1300px;
    preferred-width: 950px;
    min-height: 850px;
    max-height: 1500px;
    preferred-height: 950px;
    always-on-top: false;
    no-frame: false;
    background: #1A1B1B;

    VerticalLayout {

        // Cabeçalho da aplicação
        Rectangle {
            height: 48px;
            vertical-stretch: 0;
            background: #1A1B1B;
            border-width: 1px;
            border-color: transparent;

            VerticalLayout {
                alignment: center;
                padding-left: 16px;

                HorizontalLayout {
                    alignment: start;
                    spacing: 10px;

                // Botão principal do dashboard
                HeaderButton {
                        Text {
                            text: "Docker UI";
                            color: #ffffff;
                            font-size: 14px;
                            font-weight: 600;
                        }

                        clicked => {
                            root.screen-changed(0);
                        }
                    }

                    HeaderButton {
                        text: "Containers";
                        active: root.current-screen == 1;
                        clicked => {
                            root.screen-changed(1);
                        }
                    }

                    HeaderButton {
                        text: "Images";
                        active: root.current-screen == 2;
                        clicked => {
                            root.screen-changed(2);
                        }
                    }

                    HeaderButton {
                        text: "Networks";
                        active: root.current-screen == 3;
                        clicked => {
                            root.screen-changed(3);
                        }
                    }

                    HeaderButton {
                        text: "Volumes";
                        active: root.current-screen == 4;
                        clicked => {
                            root.screen-changed(4);
                        }
                    }
                }
            }

            // Linha separadora do cabeçalho
            Rectangle {
                width: 100%;
                height: 1px;
                background: #464747;
                y: parent.height - 1px;
            }
        }

        // Conteúdo principal
        Rectangle {
            // height: parent.height - 32px - 48px - 25px;

            background: #1A1B1B;
            vertical-stretch: 1;

            // Dashboard principal
            if root.current-screen == 0: DashboardView {
                total-containers: root.total-containers;
                running-containers: root.running-containers;
                stopped-containers: root.stopped-containers;
                paused-containers: root.paused-containers;
                total-images: root.total-images;
                docker-version: root.docker-version;
                cpu-usage-str: root.cpu-usage-str;
                memory-percentage-str: root.memory-percentage-str;
                network-rx-str: root.network-rx-str;
                network-tx-str: root.network-tx-str;
                cpu-chart: root.cpu-chart;
                memory-chart: root.memory-chart;
            }

            // Outras telas da aplicação
            if root.current-screen == 1: ContainersList { 
                containers: root.containers;
                search-text: root.search-text;
                status-filter: root.status-filter;
                
                search-changed(text) => {
                    root.search-text = text;
                    root.search-changed(text);
                }
                filter-changed(filter) => {
                    root.status-filter = filter;
                    root.filter-changed(filter);
                }
                container-action(name, action) => {
                    root.container-action(name, action);
                }
            }
            if root.current-screen == 2: ImagesList { }
            if root.current-screen == 3: NetworksList { }
            if root.current-screen == 4: VolumesList { }
        }

        // Rodapé com status do Docker
        Rectangle {
            height: 25px;
            background: #1A1B1B;
            vertical-stretch: 0;

            HorizontalLayout {
                padding-left: 8px;
                alignment: start;


                // Indicador de status do Docker
                Text {
                    text: "Status: " + root.docker-status;
                    color: root.docker-status == "Rodando" ? #0AD95C : #FA6138;
                    font-size: 14px;
                }
            }
        }
    }
}
