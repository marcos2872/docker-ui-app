struct ContainerData {
    name: string,
    image: string,
    status: string,
    ports: string,
    created: string,
}

component Button inherits Rectangle {
    in property <string> text;
    in property <bool> active: false;
    in property <length> size_w: 64px;
    in property <length> size_h: 32px;
    in property <brush> bg: #2e3030;
    callback clicked <=> touch.clicked;

    height: size_h;
    width: size_w;
    background: root.active ? #0ea5e9 : bg;
    border-radius: 6px;
    border-width: root.active ? 2px : 0px;
    border-color: #0ea5e9;

    touch := TouchArea { }

    Text {
        text: root.text;
        color: #ffffff;
        horizontal-alignment: center;
        vertical-alignment: center;
        font-size: 14px;
        x: 8px;
        y: 0px;
        width: parent.width - 16px;
        height: parent.height;
    }
}

component StatusIndicator inherits Rectangle {
    in property <string> status;

    width: 12px;
    height: 12px;
    border-radius: 6px;
    background: status == "running" ? #10b981 : status == "exited" ? #ef4444 : status == "paused" ? #f59e0b : #6b7280;
}

component ContainerItem inherits Rectangle {
    in property <ContainerData> container;
    in property <string> loading-action;
    callback container-action(string);
    callback view-details();

    background: #2e3030;
    border-radius: 8px;
    height: 80px;

    TouchArea {
        clicked => {
            view-details();
        }
    }

    HorizontalLayout {
        padding: 16px;
        spacing: 16px;
        alignment: space-between;

        HorizontalLayout {
            spacing: 16px;

            StatusIndicator {
                status: container.status;
            }

            VerticalLayout {
                spacing: 4px;
                alignment: start;

                Text {
                    text: container.name;
                    color: #ffffff;
                    font-size: 16px;
                    font-weight: 600;
                }

                HorizontalLayout {
                    spacing: 12px;

                    Text {
                        max-width: 180px;
                        min-width: 180px;
                        overflow: elide;
                        text: "imagem: " + container.image;
                        color: #9ca3af;
                        font-size: 14px;
                    }

                    Text {
                        text: "Portas: " + container.ports;
                        color: #9ca3af;
                        font-size: 14px;
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: 12px;

            VerticalLayout {
                alignment: center;

                Text {
                    text: container.status;
                    color: container.status == "running" ? #10b981 : container.status == "exited" ? #ef4444 : container.status == "paused" ? #f59e0b : #6b7280;
                    font-size: 12px;
                    font-weight: 600;
                }

                Text {
                    width: 64px;
                    text: container.created;
                    color: #6b7280;
                    font-size: 10px;
                }
            }

            Rectangle {
                width: 140px;

                if container.status == "running": VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        spacing: 12px;

                        Button {
                            text: loading-action == container.name + "_stop" ? "..." : "Parar";
                            bg: loading-action == container.name + "_stop" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("stop");
                                }
                            }
                        }

                        Button {
                            text: loading-action == container.name + "_pause" ? "..." : "Pausar";
                            bg: loading-action == container.name + "_pause" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("pause");
                                }
                            }
                        }
                    }
                }

                if container.status == "exited": VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        spacing: 12px;

                        Button {
                            text: loading-action == container.name + "_start" ? "..." : "Iniciar";
                            bg: loading-action == container.name + "_start" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("start");
                                }
                            }
                        }

                        Button {
                            text: loading-action == container.name + "_remove" ? "..." : "Deletar";
                            bg: loading-action == container.name + "_remove" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("remove");
                                }
                            }
                        }
                    }
                }

                if container.status == "paused": VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        spacing: 12px;

                        Button {
                            text: loading-action == container.name + "_unpause" ? "..." : "Iniciar";
                            bg: loading-action == container.name + "_unpause" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("unpause");
                                }
                            }
                        }

                        Button {
                            text: loading-action == container.name + "_stop" ? "..." : "Parar";
                            bg: loading-action == container.name + "_stop" ? #6b7280 : #1A1B1B;
                            clicked => {
                                if (loading-action == "") {
                                    container-action("stop");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

component ErrorMessage inherits Rectangle {
    in property <string> text;
    in property <brush> bg;
    in property <brush> bd-color;
    in property <brush> text-color;

    height: 40px;
    background: bg;
    border-radius: 8px;
    border-width: 1px;
    border-color: bd-color;

    VerticalLayout {
        alignment: center;
        padding-left: 12px;
        padding-right: 12px;

        Text {
            text: root.text;
            color: root.text-color;
            font-size: 14px;
            horizontal-alignment: center;
        }
    }
}

export component ContainersList inherits VerticalLayout {
    in property <[ContainerData]> containers;
    in property <string> search-text;
    in property <string> status-filter: "all";
    in property <string> container-loading;
    in property <string> container-error;
    in property <string> container-success;

    callback search-changed(string);
    callback filter-changed(string);
    callback container-action(string, string);
    callback view-container-details(ContainerData);
    callback create-container-clicked();

    padding: 24px;
    spacing: 24px;

    VerticalLayout {
        spacing: 20px;
        height: 150px;
        padding-top: 16px;
        vertical-stretch: 0;

        HorizontalLayout {
            alignment: space-between;

            Text {
                text: "Containers";
                font-size: 24px;
                font-weight: 600;
            }

            Button {
                text: "Novo Container";
                size_w: 128px;
                clicked => {
                    create-container-clicked();
                }
            }
        }

        HorizontalLayout {
            spacing: 16px;
            alignment: space-between;

            Rectangle {
                background: #2e3030;
                border-radius: 8px;
                height: 40px;
                width: 300px;

                VerticalLayout {
                    height: 100%;
                    alignment: center;
                    padding-left: 16px;
                    padding-right: 16px;

                    HorizontalLayout {
                        spacing: 8px;

                        Image {
                            source: @image-url("./icons/search.png");
                            width: 20px;
                            height: 20px;
                            colorize: white;
                        }

                        search-input := TextInput {
                            // placeholder-text: "Buscar container";
                            text: search-text;
                            width: 100%;
                            color: #ffffff;
                            padding: 8px;
                            edited => {
                                search-changed(self.text);
                            }
                        }
                    }
                }
            }

            HorizontalLayout {
                spacing: 8px;

                Text {
                    text: "Filtro: ";
                    color: #9ca3af;
                    vertical-alignment: center;
                    font-size: 14px;
                }

                Button {
                    text: "Todos";
                    size_w: 90px;
                    active: status-filter == "all";
                    clicked => {
                        filter-changed("all");
                    }
                }

                Button {
                    text: "Rodando";
                    size_w: 90px;
                    active: status-filter == "running";
                    clicked => {
                        filter-changed("running");
                    }
                }

                Button {
                    text: "Parados";
                    size_w: 90px;
                    active: status-filter == "exited";
                    clicked => {
                        filter-changed("exited");
                    }
                }

                Button {
                    text: "Pausados";
                    size_w: 90px;
                    active: status-filter == "paused";
                    clicked => {
                        filter-changed("paused");
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: end;

        // Mensagens de feedback
        if container-success != "": ErrorMessage {
                bg: #065f46;
                bd-color: #10b981;
                text: container-success;
                text-color: #d1fae5;
            }

            if container-error != "": ErrorMessage {
                bg: #7f1d1d;
                bd-color: #ef4444;
                text: container-error;
                text-color: #fecaca;
            }
        }
    }

    if containers.length == 0: Rectangle {
        background: #2e3030;
        border-radius: 8px;
        height: 100px;

        Text {
            text: "Nenhum container encontrado";
            color: #9ca3af;
            horizontal-alignment: center;
            vertical-alignment: center;
            font-size: 16px;
        }
    }

    if containers.length > 0: Flickable {
        vertical-stretch: 1;

        VerticalLayout {
            spacing: 12px;

            for container in containers: ContainerItem {
                container: container;
                loading-action: container-loading;
                container-action(action) => {
                    container-action(container.name, action);
                }
                view-details => {
                    view-container-details(container);
                }
            }
        }
    }
}
