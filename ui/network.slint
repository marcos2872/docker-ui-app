// ui/network.slint

struct NetworkData {
    id: string,
    name: string,
    driver: string,
    scope: string,
    created: string,
    containers_count: int,
    is_system: bool,
    in_use: bool,
}

component Button inherits Rectangle {
    in property <string> text;
    in property <bool> active: false;
    in property <bool> enabled: true;
    in property <length> size_w: 64px;
    in property <length> size_h: 32px;
    in property <brush> bg: #2e3030;
    callback clicked <=> touch.clicked;

    height: size_h;
    width: size_w;
    background: !root.enabled ? #4b5563 : root.active ? #0ea5e9 : bg;
    border-radius: 6px;
    border-width: root.active ? 2px : 0px;
    border-color: #0ea5e9;

    touch := TouchArea {
        enabled: root.enabled;
    }

    Text {
        text: root.text;
        color: !root.enabled ? #9ca3af : #ffffff;
        horizontal-alignment: center;
        vertical-alignment: center;
        font-size: 14px;
        x: 8px;
        y: 0px;
        width: parent.width - 16px;
        height: parent.height;
    }
}

component ErrorMessage inherits Rectangle {
    in property <string> text;
    in property <brush> bg;
    in property <brush> text-color;

    background: bg;
    border-radius: 8px;
    padding-left: 16px;
    padding-right: 16px;

    Text {
        text: text;
        color: text-color;
        horizontal-alignment: center;
        vertical-alignment: center;
        font-size: 14px;
    }
}

component StatusIndicator inherits Rectangle {
    in property <bool> in_use;
    in property <bool> is_system;

    width: 12px;
    height: 12px;
    border-radius: 6px;
    background: in_use ? #ef4444 : (is_system ? #f59e0b : #10b981); // Vermelho se em uso, amarelo se sistema, verde se livre
}

component NetworkItem inherits Rectangle {
    in property <NetworkData> network;
    in property <string> loading-action;
    callback network-action(string);

    background: #2e3030;
    border-radius: 8px;
    height: 80px;

    HorizontalLayout {
        padding: 16px;
        spacing: 16px;
        alignment: space-between;

        HorizontalLayout {
            spacing: 16px;
            StatusIndicator {
                in_use: network.in_use;
                is_system: network.is_system;
            }

            VerticalLayout {
                spacing: 4px;
                alignment: start;

                Text {
                    text: network.name;
                    color: #ffffff;
                    font-size: 16px;
                    font-weight: 600;
                }

                HorizontalLayout {
                    spacing: 12px;

                    Text {
                        text: "Driver: " + network.driver;
                        color: #9ca3af;
                        font-size: 14px;
                    }

                    Text {
                        text: "Scope: " + network.scope;
                        color: #9ca3af;
                        font-size: 14px;
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: 12px;

            VerticalLayout {
                alignment: center;

                Text {
                    text: network.in_use ? "Vinculada a containers" : (network.is_system ? "Network do sistema" : "Disponível");
                    color: network.in_use ? #ef4444 : (network.is_system ? #f59e0b : #10b981);
                    font-size: 12px;
                    font-weight: 600;
                }

                Text {
                    width: 80px;
                    text: network.created;
                    color: #6b7280;
                    font-size: 10px;
                }
            }

            VerticalLayout {
                alignment: center;
                spacing: 12px;

                Button {
                    text: loading-action == network.id + "_remove" ? "..." : "Deletar";
                    bg: loading-action == network.id + "_remove" ? #6b7280 : #1A1B1B;
                    enabled: !network.in_use && loading-action == ""; // Só habilita se não estiver em uso
                        clicked => {
                        if (loading-action == "") {
                            network-action("remove");
                        }
                    }
                }
            }
        }
    }
}

export component NetworksList inherits VerticalLayout {
    in property <[NetworkData]> networks;
    in property <string> network-list-error;
    in property <string> network_success_message: "";
    in property <string> network_error_in_use_message: "";
    in property <string> network_error_other_message: "";
    in property <string> network-loading;

    callback refresh-clicked();
    callback network-action(string, string);

    padding: 24px;
    spacing: 24px;

    VerticalLayout {
        spacing: 20px;
        height: 64px;
        padding-top: 8px;
        vertical-stretch: 0;
        alignment: center;

        HorizontalLayout {
            alignment: space-between;

            Text {
                text: "Networks";
                font-size: 24px;
                font-weight: 600;
            }

            if root.network-list-error != "": ErrorMessage {
                bg: #ef444420;
                text: "Erro: " + root.network-list-error;
                text-color: #ef4444;
            }

            if root.network_success_message != "": ErrorMessage {
                bg: #10b98120;
                text: root.network_success_message;
                text-color: #10b981;
            }

            if root.network_error_in_use_message != "": ErrorMessage {
                bg: #ef444420;
                text: root.network_error_in_use_message;
                text-color: #ef4444;
            }

            if root.network_error_other_message != "": ErrorMessage {
                bg: #f9731620;
                text: root.network_error_other_message;
                text-color: #f97316;
            }
        }
    }

    if networks.length == 0: Rectangle {
        background: #2e3030;
        border-radius: 8px;
        height: 100px;

        Text {
            text: "Nenhuma network encontrada";
            color: #9ca3af;
            horizontal-alignment: center;
            vertical-alignment: center;
            font-size: 16px;
        }
    }

    if networks.length > 0: Flickable {
        vertical-stretch: 1;

        VerticalLayout {
            spacing: 12px;

            for network in networks: NetworkItem {
                network: network;
                loading-action: network-loading;
                network-action(action) => {
                    network-action(network.id, action);
                }
            }
        }
    }
}
