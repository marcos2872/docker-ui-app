// Interface para gerenciamento de containers

// Estrutura de dados de um container
struct Container {
    id: string,
    name: string,
    image: string,
    state: string,
    status: string,
}

// Card individual para exibir informações de um container
component ContainerCard inherits Rectangle {
    in property <Container> container;
    // Callbacks para ações do container
    callback start-clicked(string);
    callback stop-clicked(string);
    callback restart-clicked(string);

    // Estilo do card
    height: 120px;
    background: #2e3030;
    border-radius: 8px;
    border-width: 1px;
    border-color: #404444;

    HorizontalLayout {
        padding: 16px;
        spacing: 16px;

        // Indicador visual de status
        Rectangle {
            width: 8px;
            height: 60px;
            border-radius: 4px;
            // Verde=rodando, Vermelho=parado, Laranja=pausado, Cinza=outro
            background: container.state == "running" ? #0AD95C : container.state == "exited" ? #FA6138 : container.state == "paused" ? #ffac51 : #6b7280;
        }

        // Informações do container
        VerticalLayout {
            spacing: 8px;
            alignment: start;

            HorizontalLayout {
                spacing: 12px;

                Text {
                    text: container.name;
                    color: #ffffff;
                    font-size: 18px;
                    font-weight: 600;
                }

                // Badge de status com cor correspondente
                Rectangle {
                    background: container.state == "running" ? #0AD95C20 : container.state == "exited" ? #FA613820 : container.state == "paused" ? #ffac5120 : #6b728020;
                    border-radius: 12px;
                    height: 24px;

                    HorizontalLayout {
                        padding-left: 8px;
                        padding-right: 8px;
                        alignment: center;

                        Text {
                            text: container.state;
                            color: container.state == "running" ? #0AD95C : container.state == "exited" ? #FA6138 : container.state == "paused" ? #ffac51 : #6b7280;
                            font-size: 12px;
                            font-weight: 600;
                        }
                    }
                }
            }

            Text {
                text: "ID: " + container.id;
                color: #9ca3af;
                font-size: 14px;
            }

            Text {
                text: "Image: " + container.image;
                color: #d1d5db;
                font-size: 14px;
            }

            Text {
                text: "Status: " + container.status;
                color: #9ca3af;
                font-size: 12px;
            }
        }

        // Botões de ação
        VerticalLayout {
            spacing: 8px;
            alignment: center;

            // Botão parar (apenas se container estiver rodando)
            if container.state == "running": Rectangle {
                width: 80px;
                height: 32px;
                background: stop-btn-touch.has-hover ? #dc262650 : #dc2626;
                border-radius: 6px;

                stop-btn-touch := TouchArea {
                    clicked => {
                        root.stop-clicked(container.id);
                    }
                }

                Text {
                    text: "Parar";
                    color: #ffffff;
                    font-size: 14px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }

            // Botão iniciar (apenas se container não estiver rodando)
            if container.state != "running": Rectangle {
                width: 80px;
                height: 32px;
                background: start-btn-touch.has-hover ? #16a34a50 : #16a34a;
                border-radius: 6px;

                start-btn-touch := TouchArea {
                    clicked => {
                        root.start-clicked(container.id);
                    }
                }

                Text {
                    text: "Iniciar";
                    color: #ffffff;
                    font-size: 14px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }

            // Botão reiniciar (sempre visível)
            Rectangle {
                width: 80px;
                height: 32px;
                background: restart-btn-touch.has-hover ? #2563eb50 : #2563eb;
                border-radius: 6px;

                restart-btn-touch := TouchArea {
                    clicked => {
                        root.restart-clicked(container.id);
                    }
                }

                Text {
                    text: "Restart";
                    color: #ffffff;
                    font-size: 14px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }
        }
    }
}

// Tela principal de containers
component ContainersView inherits VerticalLayout {
    in property <[Container]> containers;
    // Callbacks para operações com containers
    callback container-start(string);
    callback container-stop(string);
    callback container-restart(string);
    callback refresh-containers();

    spacing: 16px;
    padding: 16px;

    // Cabeçalho com contador e botão atualizar
    HorizontalLayout {
        alignment: space-between;

        Text {
            text: "Containers (" + containers.length + ")";
            color: #ffffff;
            font-size: 24px;
            font-weight: 600;
        }

        // Botão de atualizar lista
        Rectangle {
            width: 100px;
            height: 36px;
            background: refresh-touch.has-hover ? #374151 : #4b5563;
            border-radius: 6px;

            refresh-touch := TouchArea {
                clicked => {
                    root.refresh-containers();
                }
            }

            Text {
                text: "Atualizar";
                color: #ffffff;
                font-size: 14px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }

    // Botões de filtro
    HorizontalLayout {
        spacing: 12px;

        // Filtro: Todos os containers
        Rectangle {
            width: 80px;
            height: 32px;
            background: all-filter-touch.has-hover ? #374151 : #4b5563;
            border-radius: 6px;

            all-filter-touch := TouchArea { }

            Text {
                text: "Todos";
                color: #ffffff;
                font-size: 14px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }

        // Filtro: Apenas containers rodando
        Rectangle {
            width: 100px;
            height: 32px;
            background: running-filter-touch.has-hover ? #16a34a50 : #16a34a;
            border-radius: 6px;

            running-filter-touch := TouchArea { }

            Text {
                text: "Rodando";
                color: #ffffff;
                font-size: 14px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }

        // Filtro: Apenas containers parados
        Rectangle {
            width: 80px;
            height: 32px;
            background: stopped-filter-touch.has-hover ? #dc262650 : #dc2626;
            border-radius: 6px;

            stopped-filter-touch := TouchArea { }

            Text {
                text: "Parados";
                color: #ffffff;
                font-size: 14px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }

    // Lista scrollável de containers
    Flickable {
        VerticalLayout {
            spacing: 12px;

            // Itera sobre todos os containers criando cards
            for container in containers: ContainerCard {
                container: container;
                start-clicked(id) => {
                    root.container-start(id);
                }
                stop-clicked(id) => {
                    root.container-stop(id);
                }
                restart-clicked(id) => {
                    root.container-restart(id);
                }
            }
        }
    }
}

// Exemplo de uso no app.slint principal:
// Substitui a ContainersView simples pela versão completa:

// if root.current-screen == 1: ContainersView {
//     containers: root.containers-list;
//     container-start(id) => {
//         root.start-container(id);
//     }
//     container-stop(id) => {
//         root.stop-container(id);
//     }
//     container-restart(id) => {
//         root.restart-container(id);
//     }
//     refresh-containers() => {
//         root.refresh-containers();
//     }
// }
